// Plugins
plugins {
	id "java-gradle-plugin"
	id "jacoco"
	id "maven-publish"
	id "signing"
	id "eclipse"
	id "org.sonarqube" version "3.1.1"
	id "com.gradle.plugin-publish" version "0.12.0"
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")
def releaseBuild = !snapshotBuild

def mavenReleaseRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
def mavenSnapshotRepository = "https://oss.sonatype.org/content/repositories/snapshots/"

def resolveProperty(propertyName, envName, defValue = "<undefined>") {
	return ((project.findProperty(propertyName) ?: System.getenv(envName)) ?: defValue);
}

// Project
defaultTasks "classes", "testClasses"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenCentral()
	if(snapshotBuild) {
		maven { url mavenSnapshotRepository }
	}
	mavenLocal()
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	implementation(group: "jakarta.ws.rs", name: "jakarta.ws.rs-api", version: project.jakartaWsRsVersion)
	implementation(group: "org.glassfish.jersey.core", name: "jersey-client", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.ext", name: "jersey-proxy-client", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.media", name: "jersey-media-json-jackson", version: project.glassfishJerseyVersion)
	implementation(group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: project.jgitVersion)
	runtimeOnly(group: "org.glassfish.jersey.inject", name: "jersey-hk2", version: project.glassfishJerseyVersion)
	testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.junit5Version)
	testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.junit5Version)
}

jar {
	manifest {
		attributes(
			'Automatic-Module-Name': automaticModuleName,
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Module-Id': project.name,
			'X-Module-Name': project.name,
			'X-Module-Version': project.version,
			'X-Module-DocURL': projectUrl,
			'X-Module-License': projectLicenseUrl
		)
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "started", "failed", "passed", "skipped"
		exceptionFormat "full"
	}
}

gradlePlugin {
	plugins {
		javatoolsPlugin {
			id = "de.carne.java-tools"
			implementationClass = "de.carne.gradle.plugin.JavaToolsPlugin"
		}
	}
}

jacoco {
	toolVersion = project.jacocoVersion
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled false
		csv.enabled false
	}
}
test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
	}
}

task prepareTestProjects(type: Copy) {
	from("src/test/testProjects")
	into "${buildDir}/testProjects"
	filter {
		line -> line.replace("TEST_PLUGIN_VERSION", project.version)
					.replace("BUILD_DIR", "${project.buildDir}".replace("\\","/"))
	}
}
test.dependsOn prepareTestProjects

test {
	systemProperty "de.carne.gradle.plugin.test", "${buildDir}/testProjects"
}

java {
	withJavadocJar()
	withSourcesJar()
}

publishing {
	repositories {
		maven {
			url = (releaseBuild ? mavenReleaseRepository : mavenSnapshotRepository)
			credentials {
				username = project.resolveProperty("ossrhUsername", "OSSRH_USERNAME")
				password = project.resolveProperty("ossrhPassword", "OSSRH_PASSWORD")
			}
		}
	}
    publications {
		javaArtifacts(MavenPublication) {
			from components.java
			pom {
				name = project.name
				description = projectDescription
				url = projectUrl
				licenses {
					license {
						name = projectLicense
						url = projectLicenseUrl
						distribution = "repo"
					}
				}
				developers {
					developer {
						id = project.resolveProperty("developerId", "DEVELOPER_ID")
						name = project.resolveProperty("developerName", "DEVELOPER_NAME")
						email = project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
					}
				}
				scm {
					url = projectScmUrl
				}
			}
		}
	}
}

signing {
	sign publishing.publications.javaArtifacts
}

tasks.withType(Sign) {
	onlyIf { releaseBuild }
}

pluginBundle {
	website = projectUrl
	vcsUrl = projectScmUrl
	description = projectDescription
	tags = ["java"]
	plugins {
		javatoolsPlugin {
			id = "de.carne.java-tools"
			displayName = "Gradle Java-Tools plugin"
		}
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged { classpath ->
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/generated-gradle-jars/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
						it.sourcePath = classpath.fileReference(gradle.getGradleHomeDir().absolutePath + '/src');
					}
				}
			}
		}
	}
}
