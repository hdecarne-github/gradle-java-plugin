// Plugins
plugins {
	id "java-gradle-plugin"
	id "jacoco"
	id "maven-publish"
	id "eclipse"
	id "org.sonarqube" version "3.1"
	id "org.owasp.dependencycheck" version "6.0.5"
	id "com.jfrog.artifactory" version "4.18.3"
	id "com.jfrog.bintray" version "1.8.5"
	id "com.gradle.plugin-publish" version "0.12.0"
}

// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName, defValue = "<undefined>") {
	return ((project.findProperty(propertyName) ?: System.getenv(envName)) ?: defValue);
}

// Project
defaultTasks "classes", "testClasses"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	jcenter()
	maven { url "https://oss.jfrog.org/libs-release/" }
	if(snapshotBuild) {
		mavenLocal()
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	}
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	implementation(group: "jakarta.ws.rs", name: "jakarta.ws.rs-api", version: project.jakartaWsRsVersion)
	implementation(group: "org.glassfish.jersey.core", name: "jersey-client", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.ext", name: "jersey-proxy-client", version: project.glassfishJerseyVersion)
	implementation(group: "org.glassfish.jersey.media", name: "jersey-media-json-jackson", version: project.glassfishJerseyVersion)
	implementation(group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: project.jgitVersion)
	runtimeOnly(group: "org.glassfish.jersey.inject", name: "jersey-hk2", version: project.glassfishJerseyVersion)
	testImplementation(group: "de.carne.common", name: "java-test", version: project.javaTestVersion)
}

jar {
	manifest {
		attributes(
			'Automatic-Module-Name': automaticModuleName,
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Module-Id': project.name,
			'X-Module-Name': project.name,
			'X-Module-Version': project.version,
			'X-Module-DocURL': projectUrl,
			'X-Module-License': projectLicenseUrl
		)
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "started", "failed", "passed", "skipped"
		exceptionFormat "full"
	}
}

gradlePlugin {
	plugins {
		javatoolsPlugin {
			id = "de.carne.java-tools"
			implementationClass = "de.carne.gradle.plugin.JavaToolsPlugin"
		}
	}
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled false
		csv.enabled false
	}
}
test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property 'sonar.coverage.jacoco.xmlReportPaths', jacocoTestReport.reports.xml.destination
	}
}

task prepareTestProjects(type: Copy) {
	from("src/test/testProjects")
	into "${buildDir}/testProjects"
	filter {
		line -> line.replace("TEST_PLUGIN_VERSION", project.version)
					.replace("BUILD_DIR", "${project.buildDir}".replace("\\","/"))
	}
}
test.dependsOn prepareTestProjects

test {
	systemProperty "de.carne.gradle.plugin.test", "${buildDir}/testProjects"
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = "javadoc"
}

publishing {
	publications {
		Bintray(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
			pom {
				name = project.name
				description = projectDescription
				url = projectUrl
				licenses {
					license {
						name = projectLicense
						url = projectLicenseUrl
						distribution = "repo"
					}
				}
				developers {
					developer {
						id = project.resolveProperty("developerId", "DEVELOPER_ID")
						name = project.resolveProperty("developerName", "DEVELOPER_NAME")
						email = project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
					}
				}
				scm {
					url = projectScmUrl
				}
			}
		}
	}
}

artifactory {
	contextUrl = project.resolveProperty("artifactory_url", "ARTIFACTORY_URL", "https://oss.jfrog.org/artifactory")
	publish {
		repository {
			repoKey = (snapshotBuild ? "oss-snapshot-local" : "oss-release-local")
			username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
			password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
			maven = true
		}
		defaults {
			publications("Bintray")
		}
	}
	resolve {
		repoKey = (snapshotBuild ? "libs-snapshot" : "libs-release")
		username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
		password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
		maven = true
	}
	clientConfig.setIncludeEnvVars(false)
}
	
bintray {
	user = project.resolveProperty("bintrayUser", "BINTRAY_USER")
	key = project.resolveProperty("bintrayKey", "BINTRAY_KEY")
	publications = [ "Bintray" ]
	dryRun = (project.findProperty("bintray.dryRun") ?: false);
	publish = (project.findProperty("bintray.publish") ?: !snapshotBuild);
	override = (project.findProperty("bintray.override") ?: false);
	pkg {
		repo = "maven"
		name = project.name
		licenses = [ projectLicenseId ]
		vcsUrl = projectScmUrl
		version {
			gpg {
				sign = true
				passphrase = project.resolveProperty("bintrayGpgPassphrase", "BINTRAY_GPG_PASSPHRASE")
			}
			mavenCentralSync {
				user = project.resolveProperty("ossrhUsername", "OSSRH_USERNAME")
				password = project.resolveProperty("ossrhPassword", "OSSRH_PASSWORD")
			}
		}
	}
}

pluginBundle {
	website = projectUrl
	vcsUrl = projectScmUrl
	description = projectDescription
	tags = ["java"]
	plugins {
		javatoolsPlugin {
			id = "de.carne.java-tools"
			displayName = "Gradle Java-Tools plugin"
		}
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged { classpath ->
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/generated-gradle-jars/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
						it.sourcePath = classpath.fileReference(gradle.getGradleHomeDir().absolutePath + '/src');
					}
				}
			}
		}
	}
}
