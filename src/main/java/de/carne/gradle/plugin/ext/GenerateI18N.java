/*
 * Copyright (c) 2016-2017 Holger de Carne and contributors, All Rights Reserved.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.carne.gradle.plugin.ext;

import java.io.File;
import java.util.regex.Pattern;

import org.gradle.api.Action;
import org.gradle.api.Project;
import org.gradle.api.Task;
import org.gradle.api.file.ConfigurableFileTree;
import org.gradle.api.tasks.TaskExecutionException;

import de.carne.check.Nullable;

/**
 * Configuration object for {@linkplain de.carne.gradle.plugin.task.GenerateI18NTask}.
 * <p>
 * build.gradle:
 *
 * <pre>
 * javatools {
 *  generateI18N {
 *   ...
 *  }
 * }
 * </pre>
 */
public class GenerateI18N {

	private final Project project;

	/**
	 * Whether to enable the generation of I18N helper classes.
	 * <p>
	 * build.gradle:
	 *
	 * <pre>
	 * generateI18N {
	 *  enabled = true|false // default: false
	 * }
	 * </pre>
	 */
	public boolean enabled = false;
	/**
	 * The regex pattern identifying the keys to be generated by the task.
	 * <p>
	 * build.gradle:
	 *
	 * <pre>
	 * generateI18N {
	 *  keyFilter = "..." // default: "^I18N_.&ast;"
	 * }
	 * </pre>
	 */
	@Nullable
	public Pattern keyFilter = Pattern.compile("^I18N_.*");
	/**
	 * Target folder for the generated I18N helper classes.
	 * <p>
	 * build.gradle:
	 *
	 * <pre>
	 * generateI18N {
	 *  genDir = file(...) // default: ./src/main/java
	 * }
	 * </pre>
	 */
	@Nullable
	public File genDir;
	/**
	 * Defines the resource bundles to process.
	 * <p>
	 * build.gradle:
	 *
	 * <pre>
	 * generateI18N {
	 *  bundles = <file tree> // default: src/main/resources/&ast;&ast;/&ast;I18N.properties
	 * }
	 * </pre>
	 */
	public ConfigurableFileTree bundles;

	/**
	 * Construct {@linkplain GenerateI18N}.
	 *
	 * @param project The owning {@linkplain Project}.
	 */
	public GenerateI18N(Project project) {
		this.project = project;
		this.genDir = this.project.file("src/main/java");
		this.bundles = getBundlesDefault(this.project, "src/main/resources", "**/*I18N.properties");
	}

	private static ConfigurableFileTree getBundlesDefault(Project project, String srcDir, String include) {
		ConfigurableFileTree bundles = project.fileTree(srcDir);

		bundles.include(include);
		return bundles;
	}

	/**
	 * Execute {@linkplain #bundles} configuration action.
	 *
	 * @param configuration The configuration action.
	 */
	public void bundles(Action<? super ConfigurableFileTree> configuration) {
		configuration.execute(this.bundles);
	}

	/**
	 * Validate the configuration object before task execution.
	 *
	 * @param task The {@linkplain Task} to executed.
	 * @throws TaskExecutionException if the task execution fails due to an invalid configuration.
	 */
	public void validateTaskConfig(Task task) throws TaskExecutionException {
		if (this.keyFilter == null) {
			throw new TaskExecutionException(task, new IllegalArgumentException("keyFile = null"));
		}
		if (this.genDir == null) {
			throw new TaskExecutionException(task, new IllegalArgumentException("genDir = null"));
		}
	}

}
